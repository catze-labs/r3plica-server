// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  playFabId     String   @id
  email         String   @unique
  walletAddress String?
  created       DateTime @default(now()) @db.DateTime(6)
  updated       DateTime @default(now()) @updatedAt @db.DateTime(6)

  itemTokens    itemToken[]
  itemTransfers itemTransfer[]
  itemMappings  itemMapping[]

  achievementTokens    achievementToken[]
  achievementTransfers achievementTransfer[]
  achievementMappings  achievementMapping[]

  profileToken    profileToken?
  profileMint     profileMint[]
  profileTransfer profileTransfer[]
}

model nonce {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now()) @db.DateTime(6)
  updated DateTime @default(now()) @updatedAt @db.DateTime(6)
  address String
  value   String
  used    Boolean  @default(false)

  @@index([address])
}

model itemToken {
  tokenId         String        @id
  itemId          Int
  contractAddress String
  playFabId       String?
  user            user?         @relation(fields: [playFabId], references: [playFabId])
  created         DateTime      @default(now()) @db.DateTime(6)
  updated         DateTime      @default(now()) @updatedAt @db.DateTime(6)
  itemMapping     itemMapping[]
}

model itemTransfer {
  id              Int      @id @default(autoincrement())
  txHash          String
  txStatus        Boolean?
  itemId          Int
  playFabId       String
  tokenId         String?
  contractAddress String
  user            user     @relation(fields: [playFabId], references: [playFabId])
  created         DateTime @default(now()) @db.DateTime(6)
  updated         DateTime @default(now()) @updatedAt @db.DateTime(6)
}

model itemMapping {
  id              Int          @id @default(autoincrement())
  txHash          String
  txStatus        Boolean?
  contractAddress String
  profileTokenId  String
  profileToken    profileToken @relation(fields: [profileTokenId], references: [tokenId])
  itemTokenId     String
  itemToken       itemToken    @relation(fields: [itemTokenId], references: [tokenId])
  playFabId       String
  user            user         @relation(fields: [playFabId], references: [playFabId])
  created         DateTime     @default(now()) @db.DateTime(6)
  updated         DateTime     @default(now()) @updatedAt @db.DateTime(6)
}

model achievementToken {
  tokenId            String               @id
  achievementId      Int
  contractAddress    String
  playFabId          String?
  user               user?                @relation(fields: [playFabId], references: [playFabId])
  created            DateTime             @default(now()) @db.DateTime(6)
  updated            DateTime             @default(now()) @updatedAt @db.DateTime(6)
  achievementMapping achievementMapping[]
}

model achievementTransfer {
  id              Int      @id @default(autoincrement())
  txHash          String
  txStatus        Boolean?
  achievementId   Int
  playFabId       String
  tokenId         String?
  contractAddress String
  user            user     @relation(fields: [playFabId], references: [playFabId])
  created         DateTime @default(now()) @db.DateTime(6)
  updated         DateTime @default(now()) @updatedAt @db.DateTime(6)
}

model achievementMapping {
  id                 Int              @id @default(autoincrement())
  txHash             String
  txStatus           Boolean?
  contractAddress    String
  profileTokenId     String
  profileToken       profileToken     @relation(fields: [profileTokenId], references: [tokenId])
  achievementTokenId String
  achievementToken   achievementToken @relation(fields: [achievementTokenId], references: [tokenId])

  playFabId String
  user      user     @relation(fields: [playFabId], references: [playFabId])
  created   DateTime @default(now()) @db.DateTime(6)
  updated   DateTime @default(now()) @updatedAt @db.DateTime(6)
}

model profileToken {
  tokenId            String               @id
  txHash             String
  txStatus           Boolean?
  contractAddress    String
  playFabId          String               @unique
  user               user                 @relation(fields: [playFabId], references: [playFabId])
  created            DateTime             @default(now()) @db.DateTime(6)
  updated            DateTime             @default(now()) @updatedAt @db.DateTime(6)
  achievementMapping achievementMapping[]
  itemMapping        itemMapping[]
}

model profileTransfer {
  id              Int      @id @default(autoincrement())
  txHash          String
  txStatus        Boolean?
  playFabId       String
  contractAddress String
  user            user     @relation(fields: [playFabId], references: [playFabId])
  created         DateTime @default(now()) @db.DateTime(6)
  updated         DateTime @default(now()) @updatedAt @db.DateTime(6)
}

model profileMint {
  id              Int      @id @default(autoincrement())
  txHash          String
  txStatus        Boolean?
  playFabId       String
  tokenId         String?
  contractAddress String
  user            user     @relation(fields: [playFabId], references: [playFabId])
  created         DateTime @default(now()) @db.DateTime(6)
  updated         DateTime @default(now()) @updatedAt @db.DateTime(6)
}
